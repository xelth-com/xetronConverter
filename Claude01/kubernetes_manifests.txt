# k8s/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: eckasse
  labels:
    name: eckasse
    environment: production

---

# k8s/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eckasse-config
  namespace: eckasse
data:
  app.config.json: |
    {
      "server": {
        "port": 3000,
        "host": "0.0.0.0"
      },
      "migration": {
        "autoMigrate": true,
        "backupEnabled": true,
        "maxConcurrentMigrations": 5
      },
      "validation": {
        "strictMode": true,
        "cacheSchemas": true,
        "maxFileSize": "10MB"
      },
      "security": {
        "enableAuditLog": true,
        "sessionTimeout": 3600,
        "maxLoginAttempts": 5
      },
      "performance": {
        "enableCaching": true,
        "cacheMaxSize": "256MB",
        "workerThreads": 4
      }
    }

  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration>
      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
          <includeContext>true</includeContext>
          <includeMdc>true</includeMdc>
        </encoder>
      </appender>
      
      <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>/app/logs/eckasse.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <fileNamePattern>/app/logs/eckasse.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
          <maxFileSize>100MB</maxFileSize>
          <maxHistory>30</maxHistory>
          <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder"/>
      </appender>

      <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
      </root>
    </configuration>

---

# k8s/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eckasse-secrets
  namespace: eckasse
type: Opaque
data:
  # Base64 encoded values - replace with actual secrets
  database-password: ZWNrYXNzZV9zZWN1cmVfcGFzc3dvcmQ=
  jwt-secret: c3VwZXJfc2VjcmV0X2p3dF9rZXk=
  redis-password: cmVkaXNfcGFzc3dvcmQ=
  datev-api-key: ZGF0ZXZfYXBpX2tleQ==
  encryption-key: ZW5jcnlwdGlvbl9rZXlfMzJfYnl0ZXM=

---

# k8s/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: eckasse-data-pvc
  namespace: eckasse
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: eckasse-logs-pvc
  namespace: eckasse
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---

# k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eckasse-api
  namespace: eckasse
  labels:
    app: eckasse-api
    version: v2.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: eckasse-api
  template:
    metadata:
      labels:
        app: eckasse-api
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: eckasse-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: eckasse-api
        image: eckasse/oop-pos-mdf:2.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: PORT
          value: "3000"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: eckasse-secrets
              key: database-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: eckasse-secrets
              key: jwt-secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: eckasse-secrets
              key: redis-password
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: eckasse-secrets
              key: encryption-key
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
      volumes:
      - name: config-volume
        configMap:
          name: eckasse-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: eckasse-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: eckasse-logs-pvc
      nodeSelector:
        node-type: application
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "eckasse"
        effect: "NoSchedule"

---

# k8s/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eckasse-api-service
  namespace: eckasse
  labels:
    app: eckasse-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: eckasse-api

---

# k8s/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: eckasse-ingress
  namespace: eckasse
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.eckasse.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type"
spec:
  tls:
  - hosts:
    - api.eckasse.com
    secretName: eckasse-tls
  rules:
  - host: api.eckasse.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: eckasse-api-service
            port:
              number: 80

---

# k8s/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: eckasse-api-hpa
  namespace: eckasse
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: eckasse-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---

# k8s/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eckasse-service-account
  namespace: eckasse

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: eckasse
  name: eckasse-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eckasse-role-binding
  namespace: eckasse
subjects:
- kind: ServiceAccount
  name: eckasse-service-account
  namespace: eckasse
roleRef:
  kind: Role
  name: eckasse-role
  apiGroup: rbac.authorization.k8s.io

---

# k8s/network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: eckasse-network-policy
  namespace: eckasse
spec:
  podSelector:
    matchLabels:
      app: eckasse-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---

# k8s/pod-disruption-budget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: eckasse-pdb
  namespace: eckasse
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: eckasse-api

---

# k8s/service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: eckasse-metrics
  namespace: eckasse
  labels:
    app: eckasse-api
spec:
  selector:
    matchLabels:
      app: eckasse-api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---

# k8s/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: eckasse-backup
  namespace: eckasse
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: eckasse-backup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: eckasse/oop-pos-mdf:2.0.0
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting daily backup..."
              timestamp=$(date +%Y%m%d_%H%M%S)
              backup_dir="/app/data/backups/$timestamp"
              mkdir -p "$backup_dir"
              
              # Backup configurations
              find /app/data -name "*.json" -not -path "*/backups/*" -exec cp {} "$backup_dir/" \;
              
              # Compress backup
              tar -czf "/app/data/backups/backup_$timestamp.tar.gz" -C "$backup_dir" .
              rm -rf "$backup_dir"
              
              # Cleanup old backups (keep last 30 days)
              find /app/data/backups -name "backup_*.tar.gz" -mtime +30 -delete
              
              echo "Backup completed: backup_$timestamp.tar.gz"
            volumeMounts:
            - name: data-volume
              mountPath: /app/data
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: data-volume
            persistentVolumeClaim:
              claimName: eckasse-data-pvc

---

# k8s/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

metadata:
  name: eckasse-deployment
  namespace: eckasse

resources:
- namespace.yaml
- configmap.yaml
- secrets.yaml
- pvc.yaml
- service-account.yaml
- deployment.yaml
- service.yaml
- ingress.yaml
- hpa.yaml
- network-policy.yaml
- pod-disruption-budget.yaml
- service-monitor.yaml
- cronjob.yaml

images:
- name: eckasse/oop-pos-mdf
  newTag: v2.0.0

replicas:
- name: eckasse-api
  count: 3

patchesStrategicMerge:
- |-
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: eckasse-api
    namespace: eckasse
  spec:
    template:
      spec:
        containers:
        - name: eckasse-api
          env:
          - name: ENVIRONMENT
            value: production
          - name: CLUSTER_NAME
            value: production-cluster

commonLabels:
  environment: production
  team: eckasse
  version: v2.0.0

commonAnnotations:
  deployment.kubernetes.io/revision: "1"
  meta.helm.sh/release-name: eckasse
  meta.helm.sh/release-namespace: eckasse